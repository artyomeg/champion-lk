<?php

namespace app\controllers;

use Yii;
use yii\filters\AccessControl;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\web\ForbiddenHttpException;
use yii\helpers\Url;
use yii\base\ErrorException;

use app\models\LoginForm;
use app\models\ContactForm;
use app\models\SignupForm;
use app\models\PasswordResetRequestForm;
use app\models\ResetPasswordForm;

use app\models\Card;
use app\models\User;
use app\models\Training;
use app\models\Subscription;
use app\models\TEmail;

class SiteController extends Controller {

    /**
     * @inheritdoc
     */
    public function behaviors() {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function actions() {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    /**
     * Requests password reset.
     *
     * @return mixed
     */
    public function actionRequestPasswordReset() {
        $model = new PasswordResetRequestForm();

        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            if ($model->sendEmail()) {
                Yii::$app->session->setFlash('success', 'Заявка отправлена. Проверьте свой e-mail.');
//                return $this->goHome();
            }
            else {
                Yii::$app->session->setFlash('error', 'Извините, мы не можем восстановить пароль.');
            }
        }

        return $this->render('passwordResetRequestForm', [
                    'model' => $model,
        ]);
    }

    /**
     * Resets password.
     *
     * @param string $token
     * @return mixed
     * @throws BadRequestHttpException
     */
    public function actionResetPassword($token) {
        try {
            $model = new ResetPasswordForm($token);
        } 
        catch (InvalidParamException $e) {
            throw new BadRequestHttpException($e->getMessage());
        }
 
        if ($model->load(Yii::$app->request->post()) && $model->validate() && $model->resetPassword()) {
            Yii::$app->session->setFlash('success', 'New password was saved.');
            return $this->goHome();
        }
 
        return $this->render('resetPassword', [
            'model' => $model,
        ]);
    }
      
    /**
     * Личный кабинет - Главная.
     *
     * @return string
     */
    public function actionIndex() {
        $this->enableCsrfValidation = false;
        
        $user = User::find()->where(['email' => Yii::$app->user->identity->email])->one();
        
        $card = Card::find()->where(['card_id' => $user->card_id])->one();

        if ($card) {
            // если отправили форму обратной связи
            if ($_POST['want'] == 'freeze' || $_POST['want'] == 'sendletter') {
                // сформируем письмо клиенту
                $emailgo = new TEmail; // инициализируем супер класс отправки

                // тема
                if ($_POST['want'] == 'freeze')
                    $emailgo->subject = 'Заявка на заморозку абонемента из личного кабинета клиента';
                elseif ($_POST['want'] == 'sendletter')
                    $emailgo->subject = 'Письмо из личного кабинета клиента';

                $emailgo->from_email = Yii::$app->params['systemFromEmail']; // от кого
                $emailgo->from_name = 'Спортклуб Чемпион';

                // сформируем письмо нам
                $emailgo->to_email = Yii::$app->params['systemToEmail']; // кому
                $emailgo->to_name = 'Спортклуб Чемпион';
                $emailgo->setMessage();

                // отправляем нам 
                if ($emailgo->send()) // отправляем
                    $json['error'] = 0; // ошибок не было
                else
                    $json['error'] = 'Неясная ошибка отправки.'; 
                
                echo json_encode(['status' => 'ok']); // выводим массив ответа
                
//                return true;
            }
            else
                return $this->render('index',
                    [
                        'card' => $card
                    ]
                );
        }
        else 
            return $this->render('no_card');
    }
    
    /**
     * Регистрация
     * 
     * @return type
     */
    public function actionSignup() {
        $model = new SignupForm();

        // если модель загрузилась из $_POST
        if ($model->load(Yii::$app->request->post()))
            // если юзер присвоился
            if ($user = $model->signup())
                // если мы залогинились
                if (Yii::$app->getUser()->login($user))
                    return $this->goHome();

        return $this->render('signup', [
            'model' => $model,
        ]);
    }

    public function actionSetcards() {
//        ob_start();
//        var_dump($_POST);
//        $output = ob_get_clean();
//        file_put_contents('log.php', $output);
        
        $dataGetMethod = 'post';
        
        // если тестовая загрузка
        if ($dataGetMethod == 'testfunction')
            // используем тестовые данные
            $response = json_decode($this->getTestCardsJson(), true);
        elseif ($dataGetMethod == 'file') {
            $primaryData = file_get_contents('trainings1.php');
            // получаем json из post
            $response = json_decode($_POST["JSONdata"], true);
        }
        // если реальная загрузка
        elseif ($dataGetMethod == 'post')
            // получаем json из post
            $response = json_decode($_POST["JSONdata"], true);

        if (!empty($response))
            foreach ($response['card_id'] as $i => $card_id) {
//                if ($card_id == '7331111004841') {
//                    $a = 1;
//                }
            
                // получим карту
                $card = Card::find()->where(['card_id' => $card_id])->one();
                
                
                // если такая карта еще не фигурировала - создадим ее
                if (!$card)
                    $card = new Card;
                
                $card->card_id = $card_id;
                
                $card->fio = $response['fio'][$i];
                
                
                // если нам прислали абонемент
                if ($response['abon_name'][$i]) {
                    // uid = card_id + abon_name + (date) expiration_date
                    $noUid = '00000000-0000-0000-0000-000000000000';
                    // получим абонемент
                    $subscription = Subscription::find()->where([
                            'card_id' => $response['card_id'][$i],
                            'title' => $response['abon_name'][$i],
                            'uid' => $response['uid'][$i]
//                            'expiration_date' => date("Y.m.d", strtotime($response['expiration_date'][$i]))
                        ])->one();
                    
//                    $subscription = Subscription::find()->where([
//                            
//                        ])->one();
                    
                    // если такой абонемент еще не фигурировал - создадим его
                    if (!$subscription)
                        $subscription = new Subscription;
                        
                    $subscription->card_id = $card_id;
                    $subscription->title = $response['abon_name'][$i];
                    $subscription->uid = $response['uid'][$i];
                    $subscription->first_visit_date = 
                        ($response['first_visit_date'][$i] && ($response['first_visit_date'][$i] != '01.01.0001 0:00:00'))
                            ? date("Y.m.d", strtotime($response['first_visit_date'][$i]))
                            : '';
                    $subscription->expiration_date = 
                        ($response['expiration_date'][$i] && ($response['expiration_date'][$i] != '01.01.0001 0:00:00'))
                            ? date("Y.m.d", strtotime($response['expiration_date'][$i]))
                            : '';
                    
                    if (!$subscription->save())
                        throw new ForbiddenHttpException('Данные абонемента не сохранены');
                }
                    
                
                $card->current_subscription = $response['abon_name'][$i];
                $card->subscription_finish = 
                    ($response['expiration_date'][$i] && ($response['expiration_date'][$i] != '01.01.0001 0:00:00'))
                    ? date("Y.m.d", strtotime($response['expiration_date'][$i]))
                    : '';
                
                
                
                $card->gym_ostalos = $response['gym_ostalos'][$i];
                $card->gym_vsego = $response['gym_vsego'][$i];
                
                $card->group_ostalos = $response['group_ostalos'][$i];
                $card->group_vsego = $response['group_vsego'][$i];
                
                $card->private_ostalos = $response['private_ostalos'][$i];
                $card->private_vsego = $response['private_vsego'][$i];
                
                $card->freeze_date = $response['subzero_date'][$i] == '01.01.0001 0:00:00'
                    ? ''
                    : $response['subzero_date'][$i];
                
                $card->unfreeze_date = $response['lina_inverse_date'][$i] == '01.01.0001 0:00:00'
                    ? ''
                    : $response['lina_inverse_date'][$i];   
                
                if (!$card->save())
                    throw new ForbiddenHttpException('Данные не сохранены');
            }
            
//            echo $i;
//        return $this->render('showcards');
    }
    
    private function getTestCardsJson() {
        $json = '{
                "card_id":[
                    "7331111004001",
                    "7331111003998",
                    "7331111004391",
                    "7331111003691",
                    "7331111003806",
                    "7331111001833",
                    "7331111001833",
                    "7331111001833",
                    "7331111003844",
                    "7331111004391",
                    "7331111003806",
                    "7331111004391",
                    "7331111004841",
                    "7331111003844",
                    "7331111004452",
                    "7331111005008",
                    "7331111004391",
                    "7331111003844",
                    "7331111003844",
                    "7331111004292",
                    "7331111003707",
                    "7331111003806",
                    "7331111003806",
                    "7331111004995",
                    "7331111004148",
                    "7331111003851",
                    "7331111004308",
                    "7331111004841",
                    "7331111004445",
                    "7331111003844"
                ],
                "fio":[
                    "Ушаков Андрей Сергеевич",
                    "Сидякин Максим Геннадьевич",
                    "Кижаев Андрей Александрович",
                    "Чигирева Ирина Александровна",
                    "Помыткина Екатерина Эдуардовна",
                    "Трофимов Андрей Викторович",
                    "Трофимов Андрей Викторович",
                    "Трофимов Андрей Викторович",
                    "Витютнев Сергей Владимирович",
                    "Кижаев Андрей Александрович",
                    "Помыткина Екатерина Эдуардовна",
                    "Кижаев Андрей Александрович",
                    "Ахметшина Аделя Фаридовна",
                    "Витютнев Сергей Владимирович",
                    "Фокина Мария Вячеславовна",
                    "Ефанов Владимир Викторович",
                    "Кижаев Андрей Александрович",
                    "Витютнев Сергей Владимирович",
                    "Витютнев Сергей Владимирович",
                    "Терентьев Андрей Владимирович",
                    "Егорова Ольга Сергеевна",
                    "Помыткина Екатерина Эдуардовна",
                    "Помыткина Екатерина Эдуардовна",
                    "Ещеркина Наталья Александровна",
                    "Жандаров Игорь Сергеевич",
                    "Китаев Бек-Хан Асламбекович",
                    "Булыгин Андрей Сергеевич",
                    "Ахметшина Аделя Фаридовна",
                    "Алексеев Владимир Петрович",
                    "Витютнев Сергей Владимирович"
                ],
                "uid":[
                    "00000000-0000-0000-0000-000000000000",
                    "b4c7ef6b-02e6-11e6-9d91-005056005270",
                    "7daed52c-3aab-11e7-80c0-d8cb8ae77f03",
                    "00000000-0000-0000-0000-000000000000",
                    "44da622b-dc61-11e6-80be-d8cb8ae77f03",
                    "bb42af6f-ffe5-11e5-9d91-005056005270",
                    "0c40f1b2-23e3-11e7-80c0-d8cb8ae77f03",
                    "bb42af6f-ffe5-11e5-9d91-005056005270",
                    "c3dd5cb7-02c9-11e6-9d91-005056005270",
                    "d8155421-06a5-11e6-9d91-005056005270",
                    "080acc1e-4e27-11e6-987d-00155d5ba226",
                    "7daed52c-3aab-11e7-80c0-d8cb8ae77f03",
                    "a048245a-030d-11e6-9d91-005056005270",
                    "294303f3-1a75-11e7-80c0-d8cb8ae77f03",
                    "00000000-0000-0000-0000-000000000000",
                    "00000000-0000-0000-0000-000000000000",
                    "d8155421-06a5-11e6-9d91-005056005270",
                    "c3dd5cb7-02c9-11e6-9d91-005056005270",
                    "b6c71837-28ae-11e7-80c0-d8cb8ae77f03",
                    "00000000-0000-0000-0000-000000000000",
                    "db3e53df-2961-11e7-80c0-d8cb8ae77f03",
                    "1d2d0513-3438-11e6-987d-00155d5ba226",
                    "7986b79a-04df-11e7-80be-d8cb8ae77f03",
                    "00000000-0000-0000-0000-000000000000",
                    "00000000-0000-0000-0000-000000000000",
                    "00000000-0000-0000-0000-000000000000",
                    "00000000-0000-0000-0000-000000000000",
                    "be387e50-1fd1-11e6-949b-005056005270",
                    "00000000-0000-0000-0000-000000000000",
                    "b6c71837-28ae-11e7-80c0-d8cb8ae77f03"
                ],
                "abon_name":[
                    "",
                    "Абонемент на свободное посещение на год",
                    "Абонемент на свободное посещение на год",
                    "",
                    "Групповые занятия 12 посещений",
                    "Групповые занятия 12 посещений",
                    "Абонемент на свободное посещение на год",
                    "Абонемент на свободное посещение на год",
                    "Абонемент на свободное посещение на год",
                    "Абонемент на свободное посещение на год",
                    "Групповые занятия 12 посещений",
                    "Групповые занятия 12 посещений",
                    "",
                    "Групповые занятия 12 посещений",
                    "",
                    "",
                    "Групповые занятия 12 посещений",
                    "Групповые занятия 12 посещений",
                    "Абонемент на свободное посещение на год",
                    "",
                    "Попова Елена - йога 12 занятий",
                    "Групповые занятия 12 посещений",
                    "Групповые занятия 12 посещений",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Групповые занятия 12 посещений"
                ],
                "last_operation":[
                "",
                "15.04.2016 12:49:18",
                "17.05.2017 7:21:15",
                "",
                "17.01.2017 7:02:43",
                "11.04.2016 17:03:07",
                "18.04.2017 7:32:11",
                "11.04.2016 17:03:07",
                "15.04.2016 9:40:16",
                "20.04.2016 9:07:50",
                "20.07.2016 8:06:32",
                "17.05.2017 7:21:15",
                "15.04.2016 17:52:01",
                "06.04.2017 8:37:21",
                "",
                "",
                "20.04.2016 9:07:50",
                "15.04.2016 9:40:16",
                "24.04.2017 9:37:37",
                "",
                "25.04.2017 8:46:45",
                "17.06.2016 8:07:31",
                "09.03.2017 19:50:13",
                "",
                "",
                "",
                "",
                "22.05.2016 10:37:01",
                "",
                "24.04.2017 9:37:37"
                ],
                "first_visit_date":[
                "",
                "15.04.2016 15:36:14",
                "18.05.2017 1:28:00",
                "",
                "18.01.2017 7:02:05",
                "31.01.2017 8:32:19",
                "18.04.2017 11:25:58",
                "18.04.2016 8:49:11",
                "18.04.2016 9:27:47",
                "17.05.2016 7:46:06",
                "05.08.2016 7:03:55",
                "01.01.0001 0:00:00",
                "15.04.2016 17:52:19",
                "06.04.2017 8:37:32",
                "",
                "",
                "31.03.2017 23:07:07",
                "21.02.2017 8:18:07",
                "26.04.2017 7:48:40",
                "",
                "25.04.2017 8:46:54",
                "04.07.2016 8:22:14",
                "09.03.2017 19:50:22",
                "",
                "",
                "",
                "",
                "22.05.2016 10:37:15",
                "",
                "27.04.2017 9:05:51"
                ],
                "expiration_date":[
                "",
                "30.05.2017 0:00:00",
                "19.05.2018 0:00:00",
                "",
                "16.04.2017 0:00:00",
                "17.04.2017 0:00:00",
                "19.04.2018 0:00:00",
                "19.04.2018 0:00:00",
                "26.04.2018 0:00:00",
                "19.05.2018 0:00:00",
                "16.04.2017 0:00:00",
                "19.05.2018 0:00:00",
                "01.01.0001 0:00:00",
                "06.05.2017 0:00:00",
                "",
                "",
                "19.05.2018 0:00:00",
                "06.05.2017 0:00:00",
                "26.04.2018 0:00:00",
                "",
                "25.05.2017 0:00:00",
                "16.04.2017 0:00:00",
                "16.04.2017 0:00:00",
                "",
                "",
                "",
                "",
                "01.01.0001 0:00:00",
                "",
                "06.05.2017 0:00:00"
                ],
                "visits_count":[
                "",
                "883",
                "999",
                "",
                "12",
                "-12",
                "980",
                "980",
                "984",
                "999",
                "12",
                "12",
                "5",
                "12",
                "",
                "",
                "12",
                "12",
                "984",
                "",
                "6",
                "12",
                "12",
                "",
                "",
                "",
                "",
                "5",
                "",
                "12"
                ],
                "gym_ostalos":[
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0"
                ],
                "gym_vsego":[
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0"
                ],
                "group_ostalos":[
                "0",
                "0",
                "0",
                "0",
                "12",
                "12",
                "0",
                "0",
                "0",
                "0",
                "12",
                "12",
                "0",
                "12",
                "0",
                "0",
                "12",
                "12",
                "0",
                "0",
                "0",
                "12",
                "12",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "12"
                ],
                "group_vsego":[
                "0",
                "0",
                "0",
                "0",
                "12",
                "-12",
                "0",
                "0",
                "0",
                "0",
                "12",
                "12",
                "0",
                "12",
                "0",
                "0",
                "12",
                "12",
                "0",
                "0",
                "0",
                "12",
                "12",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "12"
                ],
                "private_ostalos":[
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0"
                ],
                "private_vsego":[
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0"
                ],
                "subzero_date":[
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00"
                ],
                "lina_inverse_date":[
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00",
                "01.01.0001 0:00:00"
                ]
                }';
        
        return $json;
    }

    public function actionSettrainings() {
//        ob_start();
//        var_dump($_POST);
//        $output = ob_get_clean();
//        file_put_contents('log.php', $output);
        
        $dataGetMethod = 'file';
                
        // если тестовая загрузка
        if ($dataGetMethod == 'testfunction')
            // используем тестовые данные
            $response = json_decode($this->getTestTrainingsJson(), true);
        elseif ($dataGetMethod == 'file') {

            for ($i = 0; $i <= 69; $i++) {
                $primaryData = file_get_contents('training_files/Выгрузка' . $i . '.txt');
                
                // получаем json из post
                $response = json_decode(stristr($primaryData, '{'), true);
            
                if (!empty($response))
                    foreach ($response['date'] as $i => $uid) {
                        $training_title = $response['vid_zanyatiya'][$i]
                            ? $response['vid_zanyatiya'][$i]
                            : 'Занятие по абонементу "' . $response['abon_name'][$i] . '"';

                        $training_date = ($response['date'][$i] == '01.01.0001 0:00:00')
                            ? ''
                            : date("Y.m.d", strtotime($response['date'][$i]));

                        $training = Training::find()->where([
                            'card_id' => $response['karta'][$i],
                            'title' => $training_title,
                            'date' => $training_date
                        ])->one();

                        if (!$training)
                            $training = new Training;

                        $training->card_id = $response['karta'][$i];

                        $training->title = $training_title;

                        $training->coach = $response['trainer'][$i];

                        $training->date = $training_date;

                        if (!$training->save());
        //                    throw new yii\base\ForbiddenHttpException('Данные не сохранены');
                    }
            }
            
            
        }
        // если реальная загрузка
        elseif ($dataGetMethod == 'post')
            // получаем json из post
            $response = json_decode($_POST["JSONdata"], true);
        
//            echo $i;
//        return $this->render('showcards');
    }
    
    public function getTestTrainingsJson() {
        $test = '{
"fio":[
"Вирясова Дарья Сергеевна",
"Герасимова Наталья Николаевна",
"Бихузина Эльвира Фанильевна",
"Кузьмин Александр Сергеевич",
"Тигин Никита Евгеньевич",
"Комолов Артем Русланович",
"Филиппова Алевтина Александровна",
"Филиппова Алевтина Александровна",
"Чердакчеева Юлия Владимировна",
"Кузьмина Ольга Владимировна",
"Кантемирова Карина Адисовна",
"Севастьянов Игорь Николаевич",
"Свидерская Дарья Андреевна",
"Шмитько Антонина Игоревна",
"Искакова Александровна Денисова ",
"Слепова Дарья Игоревна",
"Кузнецов Алексей Витальевич",
"Кормилихин Алексей Вячеславович",
"Вавилов Роман Сергеевич",
"Макаров Игорь Николаевич",
"Чигирева Ирина Александровна",
"Чигирева Ирина Александровна",
"Глазков Артем Александрович",
"Сазонов Сергей Владимирович",
"Сазонов Сергей Владимирович",
"Назаров Егор Константинович",
"Кудинова Светлана Валентиновна",
"Школьников Владислав Николаевич",
"Ямкин Никита Генадьевич",
"Ларочкин Александр Сергеевич",
"Ларочкин Александр Сергеевич",
"Еделькин Анатолий Иванович",
"Кирюхин Евгений Андреевич",
"Шамшутдинова Руфия Каримовна",
"Шамшутдинова Руфия Каримовна",
"Шарабарова Наталья Николаевна",
"Шарабарова Наталья Николаевна",
"Каменов Алексей Игорьвич",
"Баланюк Светолика Александровна",
"Маслов Александр Николаевич",
"Каргаолов Олег Борисович",
"Абраамян Карен Ваникович",
"Абраамян Карен Ваникович",
"Трифонов Максим Владимирович",
"Мелентьев Денис Сергеевич",
"Мелентьев Денис Сергеевич",
"Мозговой Павел Андреевич",
"Саттаров Вадим Расимович",
"Власова Татьяна Александровна",
"Пайдутова Кристина Игоревна",
"Уварова Юлия Игоревна",
"Уварова Юлия Игоревна",
"Котлобай Ольга Леонидовна",
"Белорусов Владимир Николаевич",
"Федорченко Галина Анатольевна",
"Федорченко Галина Анатольевна",
"Капитова Наталья Константиновна",
"Буркина Диана Андреевна",
"Акинфин Павел Владимирович",
"Гордеев Александр Александрович",
"Яшин Данила Алексеевич",
"Помыткин Дмитрий Андреевич",
"Котомкин Семен Алексеевич",
"Курицына Светлана Валерьевна",
"Трофимов Андрей Андреевич",
"Фахриев Марат Фарухович",
"Катиркин Иван Михайлович Уволен",
"Лебедева Людмила Алексеевна",
"Лебедева Людмила Алексеевна",
"Бирюкова Светлана Васильевна",
"Сагдеев Руслан Салимжанович",
"Кадринов Андрей Николаевич",
"Бирюкова Светлана Васильевна",
"Куренкова Анна Адреевна",
"Куренкова Анна Адреевна",
"Курашов Вадим Александрович",
"Сорокина Ирина Александровна",
"Курашова Наталья Ириковна",
"Иванова Татьяна Витальевна",
"Трофимов Андрей Викторович",
"Антонов Егор Михайлович",
"Пыдин Алексей Николаевич",
"Мухтаров Рашид Ильшатович",
"Сурков Данила Юрьевич",
"Скворцова Евгения Владимировна",
"Дубровский Руслан Александрович",
"Скворцова Евгения Владимировна",
"Дубровский Руслан Александрович",
"Леонтьев Станислав Сергеевич",
"Паркин Сергей Владимирович",
"Никитин Владимир Олегович",
"Михайлова Мария Михайловна",
"Кириллов Антон Валентинович",
"Бухарова Анастасия Сегеевна",
"Вещина Анастасия Алексеевна",
"Бухарова Анастасия Сегеевна",
"Воробьева Наталья Анатольевна",
"Овчинников Сергей Александрович",
"Вахрушин Владимир Анатольевич",
"Держаева Юлия Викторовна"
],
"abon_name":[
"Кострякова Светлана - Functional training- 12 посещений",
"Абонемент на свободное посещение на месяц",
"Групповые занятия 12 посещений",
"Абонемент на свободное посещение на месяц",
"Школьный абонемент 12 посещений на месяц",
"Школьный абонемент 12 посещений на месяц",
"Абонемент на свободное посещение на месяц",
"Групповые занятия 12 посещений",
"Абонемент на свободное посещение на месяц",
"Абонемент на свободное посещение на месяц",
"Абонемент на свободное посещение на месяц",
"Абонемент на 8 занятий на месяц",
"Абонемент на свободное посещение на месяц",
"Студенческий абонемент на 12 посещений на месяц",
"Школьный абонемент 12 посещений на месяц",
"Ирина Агеева - Силовой фитнес - 12 посещений",
"Абонемент на свободное посещение на месяц",
"Абонемент на свободное посещение на месяц",
"Абонемент на 12 занятий на месяц",
"Пенсионный абонемент на 12 посещений",
"Групповые занятия 12 посещений",
"Абонемент на свободное посещение на месяц",
"Школьный абонемент 12 посещений на месяц",
"Групповые занятия 12 посещений",
"Абонемент на свободное посещение на месяц",
"Школьный абонемент 8 посещений на месяц",
"Абонемент на свободное посещение на месяц",
"Студенческий абонемент на 12 посещений на месяц",
"Школьный абонемент 12 посещений на месяц",
"Студенческий абонемент на 12 посещений на месяц",
"Студенческий абонемент на 12 посещений на месяц",
"Абонемент на свободное посещение на месяц",
"Абонемент на свободное посещение на месяц",
"Абонемент на 12 занятий на месяц",
"Абонемент на 12 занятий на месяц",
"Абонемент на свободное посещение на год",
"",
"Абонемент на свободное посещение на месяц",
"Абонемент на 12 занятий на месяц",
"Абонемент на свободное посещение на год",
"Абонемент на свободное посещение на месяц",
"Абонемент на 8 занятий на месяц",
"Павел Чернов - 4 посещения",
"Абонемент на свободное посещение на месяц",
"Абонемент на свободное посещение на месяц",
"Бочков Александр 8 посещений",
"Абонемент Корпоративный на свободное посещение на месяц",
"Абонемент на свободное посещение на месяц",
"Абонемент на свободное посещение на месяц",
"Абонемент на свободное посещение на месяц",
"Павел Чернов - 12 посещений",
"Абонемент на свободное посещение на месяц",
"Абонемент на свободное посещение на месяц",
"Абонемент на свободное посещение на месяц",
"Олипер Денис 8 посещений",
"Абонемент на свободное посещение на месяц",
"ДОП абонемент для групповых (безлимитный)",
"Абонемент на свободное посещение на месяц",
"Абонемент на 8 занятий на месяц",
"Абонемент на свободное посещение на год",
"Школьный абонемент 8 посещений на месяц",
"ДОП абонемент для групповых (безлимитный)",
"Школьный абонемент 12 посещений на месяц",
"Абонемент на свободное посещение на месяц",
"Абонемент на 12 занятий на месяц",
"Студенческий абонемент на 12 посещений на месяц",
"Абонемент АРБАТ на свободное посещение на месяц",
"Абонемент на 8 занятий на месяц",
"Олипер Денис 8 посещений",
"Абонемент на 8 занятий на месяц",
"Абонемент на 12 занятий на месяц",
"Абонемент на 12 занятий на месяц",
"Олипер Денис 8 посещений",
"Абонемент на 12 занятий на месяц",
"Агеева Ирина 12 посещений",
"Абонемент на 12 занятий на месяц",
"Абонемент на свободное посещение на год",
"Студенческий абонемент на 12 посещений на месяц",
"Абонемент на 12 занятий на месяц",
"Абонемент на свободное посещение на год",
"Школьный абонемент 12 посещений на месяц",
"Групповые занятия 12 посещений",
"Групповые занятия 12 посещений",
"Абонемент на свободное посещение на месяц",
"Абонемент на свободное посещение на месяц",
"Абонемент на свободное посещение на год",
"Групповые занятия 12 посещений",
"Павел Чернов - 12 посещений",
"Абонемент на 12 занятий на месяц",
"Абонемент на свободное посещение на месяц",
"Школьный абонемент 12 посещений на месяц",
"ДОП абонемент для групповых (безлимитный)",
"Абонемент на свободное посещение на месяц",
"Абонемент на свободное посещение на месяц",
"Мельникова Елена - Аэробика -12 занятий",
"Групповые занятия 12 посещений",
"Абонемент на свободное посещение на месяц",
"Абонемент на свободное посещение на месяц",
"Абонемент на 12 посещений в месяц в дневное время (с 7 до 16-00)",
"Абонемент на 8 занятий на месяц"
],
"trainer":[
"Кострякова Светлана",
"",
"Кострякова Светлана",
"",
"",
"",
"",
"Агеева Ирина",
"",
"",
"",
"",
"",
"",
"",
"Агеева Ирина",
"",
"",
"",
"",
"Кострякова Светлана",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"Мариам Чадунели",
"",
"",
"",
"",
"",
"Павел Чернов",
"",
"",
"Бочков Александр",
"",
"",
"",
"",
"Павел Чернов",
"",
"",
"",
"Олипер Денис",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"Олипер Денис",
"",
"",
"",
"Олипер Денис",
"",
"Агеева Ирина",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"Павел Чернов",
"",
"",
"",
"",
"",
"",
"",
"Агеева Ирина",
"",
"",
"",
""
],
"vid_zanyatiya":[
"",
"",
"Групповое занятие",
"",
"",
"",
"",
"Групповое занятие",
"",
"",
"",
"Занятие в тренажерном зале",
"",
"",
"",
"",
"",
"",
"Занятие в тренажерном зале",
"",
"Групповое занятие",
"",
"",
"Групповое занятие",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"Занятие в тренажерном зале",
"Занятие в тренажерном зале",
"",
"",
"",
"Занятие в тренажерном зале",
"",
"",
"Занятие в тренажерном зале",
"Занятие с инструктором",
"",
"",
"Занятие с инструктором",
"Занятие в тренажерном зале",
"",
"",
"",
"Занятие с инструктором",
"",
"",
"",
"Занятие с инструктором",
"",
"Занятие в тренажерном зале",
"",
"Занятие в тренажерном зале",
"",
"",
"Занятие в тренажерном зале",
"",
"",
"Занятие в тренажерном зале",
"",
"Занятие в тренажерном зале",
"Занятие в тренажерном зале",
"Занятие с инструктором",
"Занятие в тренажерном зале",
"Занятие в тренажерном зале",
"Занятие в тренажерном зале",
"Занятие с инструктором",
"Занятие в тренажерном зале",
"Занятие с инструктором",
"Занятие в тренажерном зале",
"",
"",
"Занятие в тренажерном зале",
"",
"",
"Групповое занятие",
"Групповое занятие",
"",
"",
"",
"Групповое занятие",
"Занятие с инструктором",
"Занятие в тренажерном зале",
"",
"",
"Занятие в тренажерном зале",
"",
"",
"",
"Групповое занятие",
"",
"",
"",
"Занятие в тренажерном зале"
],
"karta":[
"7331111000591",
"7331111001543",
"7331111005435",
"7331111001567",
"7331111007286",
"7331111006524",
"7331111000928",
"7331111000928",
"7331111005152",
"7331111005138",
"7331111006388",
"7331111000898",
"7331111001369",
"7331111003974",
"7331111003837",
"7331111004070",
"7331111002427",
"7331111007187",
"7331111001703",
"7331111005213",
"7331111003691",
"7331111003691",
"7331111006739",
"7331111001468",
"7331111001468",
"7331111001123",
"7331111004865",
"7331111005626",
"7331111004131",
"7331111001192",
"7331111001192",
"7331111020490",
"7331111003479",
"7331111002090",
"7331111002090",
"7331111003257",
"7331111003257",
"7331111005091",
"7331111006869",
"7331111004490",
"7331111000713",
"7331111026577",
"7331111026577",
"7331111003783",
"7331111016912",
"7331111016912",
"7331111022050",
"7331111005527",
"7331111025822",
"7331111000560",
"7331111010743",
"7331111010743",
"7331111005336",
"7331111010804",
"7331111026911",
"7331111026911",
"7331111011726",
"7331111001895",
"7331111006920",
"7331111005534",
"7331111000812",
"7331111002021",
"7331111020384",
"7331111014697",
"7331111004513",
"7331111000546",
"7331111026867",
"7331111024498",
"7331111024498",
"7331111024580",
"7331111001147",
"7331111003349",
"7331111024580",
"7331111004421",
"7331111004421",
"7331111006111",
"7331111002335",
"7331111005718",
"7331111006180",
"7331111001833",
"7331111001031",
"7331111000362",
"7331111006685",
"7331111010569",
"7331111010576",
"7331111006562",
"7331111010576",
"7331111006562",
"7331111025686",
"7331111026348",
"7331111029967",
"7331111027352",
"7331111022517",
"7331111000386",
"7331111025303",
"7331111000386",
"7331111000102",
"7331111007262",
"7331111003103",
"7331111023866"
],
"date":[
"06.06.2016 17:45:25",
"06.06.2016 17:42:52",
"06.06.2016 17:42:33",
"06.06.2016 17:42:13",
"06.06.2016 17:40:59",
"06.06.2016 17:40:48",
"06.06.2016 17:40:31",
"06.06.2016 17:40:31",
"06.06.2016 17:35:51",
"06.06.2016 17:34:32",
"06.06.2016 17:32:54",
"06.06.2016 17:30:17",
"06.06.2016 17:30:06",
"06.06.2016 17:29:53",
"06.06.2016 17:29:39",
"06.06.2016 17:25:30",
"06.06.2016 17:23:14",
"06.06.2016 17:23:00",
"06.06.2016 17:21:30",
"06.06.2016 17:20:19",
"06.06.2016 17:17:10",
"06.06.2016 17:17:10",
"06.06.2016 17:15:40",
"06.06.2016 17:11:08",
"06.06.2016 17:11:08",
"06.06.2016 17:03:01",
"06.06.2016 17:02:02",
"06.06.2016 16:56:02",
"06.06.2016 16:55:53",
"06.06.2016 16:50:42",
"06.06.2016 16:50:36",
"06.06.2016 16:45:45",
"06.06.2016 16:25:00",
"06.06.2016 16:11:25",
"06.06.2016 16:11:19",
"06.06.2016 16:10:53",
"06.06.2016 16:10:53",
"06.06.2016 15:53:25",
"06.06.2016 15:42:58",
"06.06.2016 15:35:24",
"06.06.2016 15:19:15",
"13.01.2017 9:09:17",
"13.01.2017 9:09:16",
"13.01.2017 8:35:10",
"13.01.2017 8:24:02",
"13.01.2017 8:24:02",
"13.01.2017 8:16:00",
"06.06.2016 14:56:15",
"13.01.2017 8:15:37",
"06.06.2016 14:55:26",
"13.01.2017 8:08:40",
"13.01.2017 8:08:40",
"13.01.2017 7:55:31",
"13.01.2017 7:33:11",
"13.01.2017 7:33:00",
"13.01.2017 7:33:00",
"13.01.2017 7:32:51",
"06.06.2016 14:53:18",
"06.06.2016 14:47:39",
"06.06.2016 14:19:48",
"06.06.2016 14:09:50",
"13.01.2017 7:10:45",
"06.06.2016 14:09:40",
"13.01.2017 7:08:07",
"06.06.2016 14:08:15",
"06.06.2016 13:56:13",
"13.01.2017 7:01:06",
"13.01.2017 6:55:06",
"13.01.2017 6:55:04",
"13.01.2017 6:54:58",
"06.06.2016 13:53:35",
"06.06.2016 13:45:00",
"13.01.2017 6:54:55",
"06.06.2016 13:27:50",
"06.06.2016 13:27:50",
"06.06.2016 13:26:31",
"13.01.2017 6:49:36",
"06.06.2016 13:26:19",
"06.06.2016 13:25:19",
"13.01.2017 6:47:53",
"06.06.2016 13:22:46",
"13.01.2017 6:47:48",
"13.01.2017 6:47:48",
"13.01.2017 6:46:35",
"13.01.2017 6:46:35",
"06.06.2016 13:01:46",
"13.01.2017 6:46:35",
"06.06.2016 13:01:46",
"13.01.2017 6:46:34",
"13.01.2017 6:46:34",
"13.01.2017 6:46:34",
"13.01.2017 6:46:34",
"13.01.2017 6:46:34",
"06.06.2016 12:58:33",
"13.01.2017 6:46:34",
"06.06.2016 12:58:33",
"13.01.2017 6:46:34",
"06.06.2016 12:53:47",
"13.01.2017 6:46:34",
"13.01.2017 6:46:33"
]
}';
        return $test;
    }
    
    public function actionShowcards() {
        return $this->render('showcards');
    }
    
    public function actionShowtrainings() {
        return $this->render('showtrainings');
    }

    /**
     * Displays about page.
     *
     * @return string
     */
    public function actionReport() {
        // если я гость
        if (
            Yii::$app->user->isGuest) {
            // и это не страница /login и не страница showcards
            if (
                (($actionId !== 'login')
                && ($actionId !== 'signup')
                && ($actionId !== 'showcards')
                && ($actionId !== 'setcards'))
            ) {
                return $this->redirect('login');
            }
        }
        
        return $this->render('report');
    }
    
    /**
     * Login action.
     *
     * @return string
     */
    public function actionLogin() {
        if (!Yii::$app->user->isGuest)
            return $this->goHome();

        $model = new LoginForm();
        
        if ($model->load(Yii::$app->request->post()) && $model->login())
            return $this->goBack();
        
        return $this->render('login', [
            'model' => $model,
        ]);
    }

    /**
     * Logout action.
     *
     * @return string
     */
    public function actionLogout() {
        Yii::$app->user->logout();

        return $this->goHome();
    }
    
    public function beforeAction($action) {
        if (
                ($action->id !== "setcards")
                ||
                ($action->id !== "settrainings")
            )
            $this->enableCsrfValidation = false;
//        $this->enableCsrfValidation = false; 
        
        $actionId = Yii::$app->controller->action->id;
        
        // если я гость
        if (
            Yii::$app->user->isGuest) {
            // и это не страница /login и не страница showcards
            if (
                ($actionId !== 'login')
                && ($actionId !== 'request-password-reset')
                && ($actionId !== 'reset-password')
                && ($actionId !== 'signup')
                && ($actionId !== 'showcards')
                && ($actionId !== 'setcards')
                && ($actionId !== 'settrainings')
            ) {
                return $this->redirect('login');
            }
        }
            
        
        return parent::beforeAction($action);
    }
}
